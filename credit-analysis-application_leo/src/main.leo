function main(w100: i16, w101: i16, w102: i16, w103: i16, w104: i16, w105: i16, w106: i16, w107: i16, w108: i16, w109: i16, b10: i16, w110: i16, w111: i16, w112: i16, w113: i16, w114: i16, w115: i16, w116: i16, w117: i16, w118: i16, w119: i16, b11: i16, w120: i16, w121: i16, w122: i16, w123: i16, w124: i16, w125: i16, w126: i16, w127: i16, w128: i16, w129: i16, b12: i16, w130: i16, w131: i16, w132: i16, w133: i16, w134: i16, w135: i16, w136: i16, w137: i16, w138: i16, w139: i16, b13: i16, w140: i16, w141: i16, w142: i16, w143: i16, w144: i16, w145: i16, w146: i16, w147: i16, w148: i16, w149: i16, b14: i16, w150: i16, w151: i16, w152: i16, w153: i16, w154: i16, w155: i16, w156: i16, w157: i16, w158: i16, w159: i16, b15: i16, w160: i16, w161: i16, w162: i16, w163: i16, w164: i16, w165: i16, w166: i16, w167: i16, w168: i16, w169: i16, b16: i16, w170: i16, w171: i16, w172: i16, w173: i16, w174: i16, w175: i16, w176: i16, w177: i16, w178: i16, w179: i16, b17: i16, w180: i16, w181: i16, w182: i16, w183: i16, w184: i16, w185: i16, w186: i16, w187: i16, w188: i16, w189: i16, b18: i16, w190: i16, w191: i16, w192: i16, w193: i16, w194: i16, w195: i16, w196: i16, w197: i16, w198: i16, w199: i16, b19: i16, w1100: i16, w1101: i16, w1102: i16, w1103: i16, w1104: i16, w1105: i16, w1106: i16, w1107: i16, w1108: i16, w1109: i16, w1110: i16, w1111: i16, w1112: i16, w1113: i16, w1114: i16, w1115: i16, w1116: i16, w1117: i16, w1118: i16, w1119: i16, w1120: i16, w1121: i16, w1122: i16, w1123: i16, w1124: i16, w1125: i16, w1126: i16, w1127: i16, w1128: i16, w1129: i16, w1130: i16, w1131: i16, w1132: i16, w1133: i16, w1134: i16, w1135: i16, w1136: i16, w1137: i16, w1138: i16, w1139: i16, w1140: i16, w1141: i16, w1142: i16, w1143: i16, w1144: i16, w1145: i16, w1146: i16, w1147: i16, w1148: i16, w1149: i16, w1150: i16, w1151: i16, w1152: i16, w1153: i16, w1154: i16, w1155: i16, w1156: i16, w1157: i16, w1158: i16, w1159: i16, w1160: i16, w1161: i16, w1162: i16, w1163: i16, w1164: i16, w1165: i16, w1166: i16, w1167: i16, w1168: i16, w1169: i16, w1170: i16, w1171: i16, w1172: i16, w1173: i16, w1174: i16, w1175: i16, w1176: i16, w1177: i16, w1178: i16, w1179: i16, w1180: i16, w1181: i16, w1182: i16, w1183: i16, w1184: i16, w1185: i16, w1186: i16, w1187: i16, w1188: i16, w1189: i16, w1190: i16, w1191: i16, w1192: i16, w1193: i16, w1194: i16, w1195: i16, w1196: i16, w1197: i16, w1198: i16, w1199: i16, w200: i16, w201: i16, b20: i16, w210: i16, w211: i16, b21: i16, w220: i16, w221: i16, w230: i16, w231: i16, w240: i16, w241: i16, w250: i16, w251: i16, w260: i16, w261: i16, w270: i16, w271: i16, w280: i16, w281: i16, w290: i16, w291: i16, input0: i16, input1: i16, input2: i16, input3: i16, input4: i16, input5: i16, input6: i16, input7: i16, input8: i16, input9: i16, input10: i16, input11: i16, input12: i16, input13: i16, input14: i16, input15: i16, input16: i16, input17: i16, input18: i16, input19: i16) -> [i16; 1] {
let neuron00: i16 = input0;
let neuron01: i16 = input1;
let neuron02: i16 = input2;
let neuron03: i16 = input3;
let neuron04: i16 = input4;
let neuron05: i16 = input5;
let neuron06: i16 = input6;
let neuron07: i16 = input7;
let neuron08: i16 = input8;
let neuron09: i16 = input9;
let neuron010: i16 = input10;
let neuron011: i16 = input11;
let neuron012: i16 = input12;
let neuron013: i16 = input13;
let neuron014: i16 = input14;
let neuron015: i16 = input15;
let neuron016: i16 = input16;
let neuron017: i16 = input17;
let neuron018: i16 = input18;
let neuron019: i16 = input19;

let neuron10: i16 = rectified_linear_activation(neuron00 * w100 / 128 + neuron01 * w110 / 128 + neuron02 * w120 / 128 + neuron03 * w130 / 128 + neuron04 * w140 / 128 + neuron05 * w150 / 128 + neuron06 * w160 / 128 + neuron07 * w170 / 128 + neuron08 * w180 / 128 + neuron09 * w190 / 128 + neuron010 * w1100 / 128 + neuron011 * w1110 / 128 + neuron012 * w1120 / 128 + neuron013 * w1130 / 128 + neuron014 * w1140 / 128 + neuron015 * w1150 / 128 + neuron016 * w1160 / 128 + neuron017 * w1170 / 128 + neuron018 * w1180 / 128 + neuron019 * w1190 / 128 + b10);
let neuron11: i16 = rectified_linear_activation(neuron00 * w101 / 128 + neuron01 * w111 / 128 + neuron02 * w121 / 128 + neuron03 * w131 / 128 + neuron04 * w141 / 128 + neuron05 * w151 / 128 + neuron06 * w161 / 128 + neuron07 * w171 / 128 + neuron08 * w181 / 128 + neuron09 * w191 / 128 + neuron010 * w1101 / 128 + neuron011 * w1111 / 128 + neuron012 * w1121 / 128 + neuron013 * w1131 / 128 + neuron014 * w1141 / 128 + neuron015 * w1151 / 128 + neuron016 * w1161 / 128 + neuron017 * w1171 / 128 + neuron018 * w1181 / 128 + neuron019 * w1191 / 128 + b11);
let neuron12: i16 = rectified_linear_activation(neuron00 * w102 / 128 + neuron01 * w112 / 128 + neuron02 * w122 / 128 + neuron03 * w132 / 128 + neuron04 * w142 / 128 + neuron05 * w152 / 128 + neuron06 * w162 / 128 + neuron07 * w172 / 128 + neuron08 * w182 / 128 + neuron09 * w192 / 128 + neuron010 * w1102 / 128 + neuron011 * w1112 / 128 + neuron012 * w1122 / 128 + neuron013 * w1132 / 128 + neuron014 * w1142 / 128 + neuron015 * w1152 / 128 + neuron016 * w1162 / 128 + neuron017 * w1172 / 128 + neuron018 * w1182 / 128 + neuron019 * w1192 / 128 + b12);
let neuron13: i16 = rectified_linear_activation(neuron00 * w103 / 128 + neuron01 * w113 / 128 + neuron02 * w123 / 128 + neuron03 * w133 / 128 + neuron04 * w143 / 128 + neuron05 * w153 / 128 + neuron06 * w163 / 128 + neuron07 * w173 / 128 + neuron08 * w183 / 128 + neuron09 * w193 / 128 + neuron010 * w1103 / 128 + neuron011 * w1113 / 128 + neuron012 * w1123 / 128 + neuron013 * w1133 / 128 + neuron014 * w1143 / 128 + neuron015 * w1153 / 128 + neuron016 * w1163 / 128 + neuron017 * w1173 / 128 + neuron018 * w1183 / 128 + neuron019 * w1193 / 128 + b13);
let neuron14: i16 = rectified_linear_activation(neuron00 * w104 / 128 + neuron01 * w114 / 128 + neuron02 * w124 / 128 + neuron03 * w134 / 128 + neuron04 * w144 / 128 + neuron05 * w154 / 128 + neuron06 * w164 / 128 + neuron07 * w174 / 128 + neuron08 * w184 / 128 + neuron09 * w194 / 128 + neuron010 * w1104 / 128 + neuron011 * w1114 / 128 + neuron012 * w1124 / 128 + neuron013 * w1134 / 128 + neuron014 * w1144 / 128 + neuron015 * w1154 / 128 + neuron016 * w1164 / 128 + neuron017 * w1174 / 128 + neuron018 * w1184 / 128 + neuron019 * w1194 / 128 + b14);
let neuron15: i16 = rectified_linear_activation(neuron00 * w105 / 128 + neuron01 * w115 / 128 + neuron02 * w125 / 128 + neuron03 * w135 / 128 + neuron04 * w145 / 128 + neuron05 * w155 / 128 + neuron06 * w165 / 128 + neuron07 * w175 / 128 + neuron08 * w185 / 128 + neuron09 * w195 / 128 + neuron010 * w1105 / 128 + neuron011 * w1115 / 128 + neuron012 * w1125 / 128 + neuron013 * w1135 / 128 + neuron014 * w1145 / 128 + neuron015 * w1155 / 128 + neuron016 * w1165 / 128 + neuron017 * w1175 / 128 + neuron018 * w1185 / 128 + neuron019 * w1195 / 128 + b15);
let neuron16: i16 = rectified_linear_activation(neuron00 * w106 / 128 + neuron01 * w116 / 128 + neuron02 * w126 / 128 + neuron03 * w136 / 128 + neuron04 * w146 / 128 + neuron05 * w156 / 128 + neuron06 * w166 / 128 + neuron07 * w176 / 128 + neuron08 * w186 / 128 + neuron09 * w196 / 128 + neuron010 * w1106 / 128 + neuron011 * w1116 / 128 + neuron012 * w1126 / 128 + neuron013 * w1136 / 128 + neuron014 * w1146 / 128 + neuron015 * w1156 / 128 + neuron016 * w1166 / 128 + neuron017 * w1176 / 128 + neuron018 * w1186 / 128 + neuron019 * w1196 / 128 + b16);
let neuron17: i16 = rectified_linear_activation(neuron00 * w107 / 128 + neuron01 * w117 / 128 + neuron02 * w127 / 128 + neuron03 * w137 / 128 + neuron04 * w147 / 128 + neuron05 * w157 / 128 + neuron06 * w167 / 128 + neuron07 * w177 / 128 + neuron08 * w187 / 128 + neuron09 * w197 / 128 + neuron010 * w1107 / 128 + neuron011 * w1117 / 128 + neuron012 * w1127 / 128 + neuron013 * w1137 / 128 + neuron014 * w1147 / 128 + neuron015 * w1157 / 128 + neuron016 * w1167 / 128 + neuron017 * w1177 / 128 + neuron018 * w1187 / 128 + neuron019 * w1197 / 128 + b17);
let neuron18: i16 = rectified_linear_activation(neuron00 * w108 / 128 + neuron01 * w118 / 128 + neuron02 * w128 / 128 + neuron03 * w138 / 128 + neuron04 * w148 / 128 + neuron05 * w158 / 128 + neuron06 * w168 / 128 + neuron07 * w178 / 128 + neuron08 * w188 / 128 + neuron09 * w198 / 128 + neuron010 * w1108 / 128 + neuron011 * w1118 / 128 + neuron012 * w1128 / 128 + neuron013 * w1138 / 128 + neuron014 * w1148 / 128 + neuron015 * w1158 / 128 + neuron016 * w1168 / 128 + neuron017 * w1178 / 128 + neuron018 * w1188 / 128 + neuron019 * w1198 / 128 + b18);
let neuron19: i16 = rectified_linear_activation(neuron00 * w109 / 128 + neuron01 * w119 / 128 + neuron02 * w129 / 128 + neuron03 * w139 / 128 + neuron04 * w149 / 128 + neuron05 * w159 / 128 + neuron06 * w169 / 128 + neuron07 * w179 / 128 + neuron08 * w189 / 128 + neuron09 * w199 / 128 + neuron010 * w1109 / 128 + neuron011 * w1119 / 128 + neuron012 * w1129 / 128 + neuron013 * w1139 / 128 + neuron014 * w1149 / 128 + neuron015 * w1159 / 128 + neuron016 * w1169 / 128 + neuron017 * w1179 / 128 + neuron018 * w1189 / 128 + neuron019 * w1199 / 128 + b19);
let neuron20: i16 = (neuron10 * w200 / 128 + neuron11 * w210 / 128 + neuron12 * w220 / 128 + neuron13 * w230 / 128 + neuron14 * w240 / 128 + neuron15 * w250 / 128 + neuron16 * w260 / 128 + neuron17 * w270 / 128 + neuron18 * w280 / 128 + neuron19 * w290 / 128 + b20);
let neuron21: i16 = (neuron10 * w201 / 128 + neuron11 * w211 / 128 + neuron12 * w221 / 128 + neuron13 * w231 / 128 + neuron14 * w241 / 128 + neuron15 * w251 / 128 + neuron16 * w261 / 128 + neuron17 * w271 / 128 + neuron18 * w281 / 128 + neuron19 * w291 / 128 + b21);
return [neuron21];}

function rectified_linear_activation(x: i16) -> i16 {
let result: i16 = 0;
if x > 0 {
result = x;
}
return result;
}